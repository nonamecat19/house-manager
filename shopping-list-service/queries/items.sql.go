// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: items.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const addItem = `-- name: AddItem :one
INSERT INTO items (name)
VALUES ($1)
RETURNING id, name, timestamp
`

func (q *Queries) AddItem(ctx context.Context, name string) (Item, error) {
	row := q.db.QueryRowContext(ctx, addItem, name)
	var i Item
	err := row.Scan(&i.ID, &i.Name, &i.Timestamp)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteItem, id)
	return err
}

const listItems = `-- name: ListItems :many
SELECT id, name, timestamp
FROM items
`

func (q *Queries) ListItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(&i.ID, &i.Name, &i.Timestamp); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
